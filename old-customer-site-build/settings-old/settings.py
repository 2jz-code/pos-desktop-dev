# -*- coding: utf-8 -*-
"""
Django settings for ajeenPOS project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os  # <-- Import the os module
from urllib.parse import urlparse  # <-- Import urlparse for Redis URL
import logging
import copy  # For deep copying the dict to redact password

logger = logging.getLogger(__name__)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable DJANGO_SECRET_KEY, provide a default for development
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-p(z*7*h-%edr6kgk(l_8fhju&@r$y+l&q7b6&7*8g*ugku5nob",
)  # Use a secure, unique key in production!

# SECURITY WARNING: don't run with debug turned on in production!
# Use environment variable DJANGO_DEBUG, default to False for production safety
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Use environment variable DJANGO_ALLOWED_HOSTS (comma-separated string)
# Default allows localhost for development
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "users",
    "contact",
    "products",
    "orders",
    "payments",
    "reports",
    "channels",
    "rewards",
    "discounts",
    "cogs",
    # "hardware.apps.HardwareConfig",  # Note: Parts of this will be refactored later
    "settings.apps.SettingsConfig",
    "storages",  # <--- ADD THIS LINE
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Keep near the top
    "django.middleware.security.SecurityMiddleware",  # Keep near the top
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 'corsheaders.middleware.CorsMiddleware', # Redundant, remove this one
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.middleware.JWTMiddleware",
    "hardware.middleware.HardwareDebugMiddleware",  # This might be removed later depending on hardware refactor
]

ROOT_URLCONF = "ajeenPOS.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR
            / "templates",  # Ensure this line exists and points to backend/templates
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# --- Hardware Configuration ---
# NOTE: This section will be largely superseded by the Local Hardware Agent in Phase 1.
# For now, keep it for reference or potential configuration settings management via the 'settings' app.
HARDWARE_CONFIG = {
    "USE_REAL_HARDWARE": {
        "RECEIPT_PRINTER": True,
        "CASH_DRAWER": False,
        "CARD_READER": False,
    },
    "PRINTERS": {
        "TRANSACTION": {
            "ip": os.environ.get("HW_PRINTER_TRANSACTION_IP", "192.168.2.196"),
            "port": int(os.environ.get("HW_PRINTER_TRANSACTION_PORT", 9100)),
            "type": "network",
            "enabled": os.environ.get("HW_PRINTER_TRANSACTION_ENABLED", "True")
            == "True",
            "role": "transaction",
        },
        "MANAEESH": {
            "ip": os.environ.get("HW_PRINTER_MANAEESH_IP", "192.168.2.197"),
            "port": int(os.environ.get("HW_PRINTER_MANAEESH_PORT", 9100)),
            "type": "network",
            "enabled": os.environ.get("HW_PRINTER_MANAEESH_ENABLED", "False") == "True",
            "categories": ["Mana'eesh"],
            "role": "station",
        },
        "DRINKS_SOUP": {
            "ip": os.environ.get("HW_PRINTER_DRINKS_SOUP_IP", "192.168.2.198"),
            "port": int(os.environ.get("HW_PRINTER_DRINKS_SOUP_PORT", 9100)),
            "type": "network",
            "enabled": os.environ.get("HW_PRINTER_DRINKS_SOUP_ENABLED", "False")
            == "True",
            "categories": ["Drinks", "Soups"],
            "role": "station",
        },
        "QC": {
            "ip": os.environ.get("HW_PRINTER_QC_IP", "192.168.2.199"),
            "port": int(os.environ.get("HW_PRINTER_QC_PORT", 9100)),
            "type": "network",
            "enabled": os.environ.get("HW_PRINTER_QC_ENABLED", "False") == "True",
            "role": "quality_control",
        },
    },
}

WSGI_APPLICATION = "ajeenPOS.wsgi.application"
ASGI_APPLICATION = "ajeenPOS.asgi.application"

# --- Channels (WebSockets) ---
# Use REDIS_URL environment variable (e.g., redis://localhost:6379/0)
REDIS_URL = os.environ.get(
    "REDIS_URL", "redis://127.0.0.1:6379/0"
)  # Default for local dev
redis_parsed = urlparse(REDIS_URL)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # Use redis_parsed.hostname, redis_parsed.port, and redis_parsed.path (for db number)
            "hosts": [
                (redis_parsed.hostname or "127.0.0.1", redis_parsed.port or 6379)
            ],
            # Add password if needed from redis_parsed.password
            # Add db number if needed, derived from redis_parsed.path
        },
    }
}
if redis_parsed.password:
    CHANNEL_LAYERS["default"]["CONFIG"]["hosts"][0] = (
        redis_parsed.hostname or "127.0.0.1",
        redis_parsed.port or 6379,
        {"password": redis_parsed.password},
    )
if redis_parsed.path and redis_parsed.path != "/":
    # Extract DB number, assuming path is like /0, /1 etc.
    try:
        db_num = int(redis_parsed.path.lstrip("/"))
        CHANNEL_LAYERS["default"]["CONFIG"]["hosts"] = (
            [
                f"redis://:{redis_parsed.password}@{redis_parsed.hostname}:{redis_parsed.port}/{db_num}"
            ]
            if redis_parsed.password
            else [f"redis://{redis_parsed.hostname}:{redis_parsed.port}/{db_num}"]
        )
    except ValueError:
        pass  # Ignore if path is not a valid integer


# --- Authentication & Authorization ---
AUTH_USER_MODEL = "users.CustomUser"

# --- CORS & CSRF ---
# In production, set CORS_ALLOW_ALL_ORIGINS to False
CORS_ALLOW_CREDENTIALS = (
    os.environ.get("DJANGO_CORS_ALLOW_CREDENTIALS", "True") == "True"
)

# Use environment variable DJANGO_CORS_ALLOWED_ORIGINS (comma-separated string)
# Default allows typical local development servers
CORS_ALLOWED_ORIGINS = os.environ.get(
    "DJANGO_CORS_ALLOWED_ORIGINS",
    "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173,http://localhost:8000,http://127.0.0.1:8000",  # Added localhost:8000
).split(",")

CORS_ALLOW_CREDENTIALS = True  # Usually needed for cookie/session auth

# Use environment variable DJANGO_CSRF_TRUSTED_ORIGINS (comma-separated string)
# Default allows typical local development servers
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173,http://localhost:8000,http://127.0.0.1:8000",  # Added localhost:8000
).split(",")

CSRF_COOKIE_HTTPONLY = (
    False  # Required if frontend needs to read CSRF token (common in SPAs)
)
SESSION_COOKIE_SAMESITE = "Lax"  # Consider 'Strict' if applicable
CSRF_COOKIE_SAMESITE = "Lax"  # Consider 'Strict' if applicable


# --- REST Framework & JWT ---
from datetime import timedelta

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "users.authentication.WebsiteCookieJWTAuthentication",
        # Consider adding SessionAuthentication back if needed for admin or specific views
        # "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [  # Good practice to set a default
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_RENDERER_CLASSES": [  # Enable browsable API only in DEBUG
        "rest_framework.renderers.JSONRenderer",
    ]
    + (["rest_framework.renderers.BrowsableAPIRenderer"] if DEBUG else []),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.environ.get("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", 15))
    ),  # Increase for production?
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.environ.get("JWT_REFRESH_TOKEN_LIFETIME_DAYS", 7))
    ),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,  # Uses the main SECRET_KEY
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# --- Database ---
DATABASE_URL = os.environ.get("DATABASE_URL")
# Get DB_SSLMODE from environment, default to 'verify-ca' for production.
# This 'verify-ca' is crucial for RDS to use the provided sslrootcert.
DB_SSLMODE = os.environ.get(
    "DB_SSLMODE", "verify-ca"
)  # Ensure this is 'verify-ca' in ECS env

if DATABASE_URL:
    db_config = urlparse(DATABASE_URL)
    DATABASES = {
        "default": {
            "ENGINE": (
                "django.db.backends.postgresql"
                if db_config.scheme == "postgres"
                else "django.db.backends.mysql"  # Or other backends
            ),
            "NAME": db_config.path[1:],  # Remove leading '/'
            "USER": db_config.username,
            "PASSWORD": db_config.password,  # This will be redacted before logging
            "HOST": db_config.hostname,
            "PORT": db_config.port,
            "OPTIONS": {},  # Initialize OPTIONS dictionary
        }
    }

    # Explicitly set SSL options ONLY if connecting to PostgreSQL
    if DATABASES["default"]["ENGINE"] == "django.db.backends.postgresql":
        DATABASES["default"]["OPTIONS"]["sslmode"] = DB_SSLMODE
        if DB_SSLMODE in ["verify-ca", "verify-full"]:
            # This path MUST match where you COPY the .pem file in your Dockerfile
            # and must be readable by the user running Gunicorn (app_user).
            # Using absolute path as copied in Dockerfile.
            DATABASES["default"]["OPTIONS"][
                "sslrootcert"
            ] = "/app/certs/global-bundle.pem"
        else:
            # Ensure sslrootcert is not set or is None if not verify-ca or verify-full
            # This helps avoid psycopg2 trying default (potentially inaccessible) paths.
            DATABASES["default"]["OPTIONS"].pop("sslrootcert", None)
            # If sslmode is 'require' but not 'verify-ca'/'verify-full', psycopg2 will still encrypt
            # but might use system CAs or default user CAs. The error indicated it tried /root/.

    # Log the database configuration (with password redacted) for debugging
    # This logging should appear in your CloudWatch logs for the backend-app container
    try:
        # Create a deep copy for logging to avoid altering the original DATABASES dict
        log_db_config = copy.deepcopy(DATABASES)
        # Redact password from the log output
        if log_db_config.get("default", {}).get("PASSWORD"):
            log_db_config["default"]["PASSWORD"] = "****REDACTED****"

        logger.info(f"Final Django DATABASES config being used: {log_db_config}")
        logger.info(f"DB_SSLMODE environment variable evaluated to: {DB_SSLMODE}")

        # Log specific SSL options if present
        db_options = DATABASES.get("default", {}).get("OPTIONS", {})
        if "sslmode" in db_options:
            logger.info(f"Database OPTIONS 'sslmode': {db_options['sslmode']}")
        if "sslrootcert" in db_options:
            logger.info(
                f"Database OPTIONS 'sslrootcert' path being used: {db_options['sslrootcert']}"
            )
        elif DB_SSLMODE in ["verify-ca", "verify-full"]:
            logger.warning(
                "sslrootcert is EXPECTED but NOT SET in DB OPTIONS (DB_SSLMODE is verify-ca/full)."
            )
        else:
            logger.info(
                "sslrootcert is NOT being set in DB OPTIONS (DB_SSLMODE is not verify-ca/full)."
            )

    except Exception as e:
        logger.error(f"Error during database configuration logging: {e}")

else:
    # Default to SQLite for local development if DATABASE_URL is not set
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",  # Assumes BASE_DIR is correctly defined
        }
    }
    logger.info(
        "DATABASE_URL environment variable not found, using SQLite as fallback."
    )

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = os.environ.get(
    "DJANGO_TIME_ZONE", "America/Chicago"
)  # Set via env var if needed
USE_I18N = True
USE_TZ = True


if DEBUG:
    # --- LOCAL DEVELOPMENT SETTINGS ---
    # URL prefix for static files.
    STATIC_URL = "/static/"
    # Directory where manage.py collectstatic will copy files for local serving.
    STATIC_ROOT = BASE_DIR / "staticfiles"

    # URL that handles the media served from MEDIA_ROOT.
    MEDIA_URL = "/media/"
    # For local storage in development.
    MEDIA_ROOT = BASE_DIR / "media"
else:
    # --- PRODUCTION S3 SETTINGS ---
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
    AWS_S3_CUSTOM_DOMAIN = os.environ.get(
        "AWS_S3_CUSTOM_DOMAIN", f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    )

    # Tell Django to use S3 for media files
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    # Tell Django to use S3 for static files (collectstatic)
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",  # Cache files in browser for 1 day
    }

    # The location inside your bucket where static and media files will be stored
    AWS_LOCATION = "static"
    MEDIA_LOCATION = "media"

    # Generate URLs for the files
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/"

    # --- THE FIX IS HERE ---
    # This path is required for the collectstatic command to have a place
    # to gather static files before uploading them to S3.
    STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


EMAIL_BACKEND = os.environ.get(
    "DJANGO_EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)  # Default to console backend if not set
EMAIL_HOST = os.environ.get("DJANGO_EMAIL_HOST")
EMAIL_PORT = int(
    os.environ.get("DJANGO_EMAIL_PORT", 587)
)  # Default to 587, ensure it's an int
EMAIL_USE_TLS = (
    os.environ.get("DJANGO_EMAIL_USE_TLS", "True") == "True"
)  # Convert to boolean
EMAIL_USE_SSL = (
    os.environ.get("DJANGO_EMAIL_USE_SSL", "False") == "True"
)  # Convert to boolean
EMAIL_HOST_USER = os.environ.get("DJANGO_EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("DJANGO_EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DJANGO_DEFAULT_FROM_EMAIL")  # Default if not set

logger.info(
    f"EFFECTIVE EMAIL_BACKEND: {EMAIL_BACKEND}"
)  # Add this for specific confirmation

# --- Logging ---
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            # Include timestamp, level, logger name, message
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },
        "simple": {"format": "[%(levelname)s] %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",  # Logs to stdout/stderr
            "formatter": "verbose",  # Use detailed format for console
        },
        # Add file handler for production if needed (commented out for now)
        # 'file': { ... },
    },
    "root": {
        # Default handler for all loggers if not specified otherwise
        "handlers": ["console"],  # Log to console by default
        "level": os.environ.get(
            "DJANGO_LOG_LEVEL", "INFO"
        ),  # Control root level via env var (INFO default)
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.environ.get(
                "DJANGO_DJANGO_LOG_LEVEL", "INFO"
            ),  # Django specific logs (INFO default)
            "propagate": False,  # Don't send to root logger too
        },
        "django.db.backends": {  # Silence noisy SQL logs unless DEBUG
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "WARNING",  # WARNING in production
            "propagate": False,
        },
        # Your app's loggers (INFO default in production, DEBUG if DEBUG=True)
        "ajeenPOS": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "users": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "products": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "orders": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "payments": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "reports": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "hardware": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "settings": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "rewards": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "discounts": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        # Add delivery logger if needed
        "delivery": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}


# --- Payment Configs ---
STRIPE_PUBLISHABLE_KEY = os.environ.get(
    "STRIPE_PUBLISHABLE_KEY"
)  # pk_live_... or pk_test_...
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")  # sk_live_... or sk_test_...
STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET")  # whsec_...

# CSP settings might need adjustment based on final deployment and other scripts
CSP_DEFAULT_SRC = ("'self'", "*.stripe.com")
CSP_SCRIPT_SRC = ("'self'", "*.stripe.com", "https://js.stripe.com")
CSP_FRAME_SRC = ("'self'", "*.stripe.com")
CSP_CONNECT_SRC = ("'self'", "*.stripe.com", "api.stripe.com")
# MIDDLEWARE += ['csp.middleware.CSPMiddleware'] # Add if using django-csp

# --- Frontend URL ---
# Use for things like password reset emails, etc.
FRONTEND_URL = os.environ.get(
    "FRONTEND_URL", "http://localhost:3000"
)  # URL of your customer website frontend

# --- Production Security Settings ---
# These settings are typically enabled only when DEBUG is False
if not DEBUG:
    SECURE_SSL_REDIRECT = os.environ.get("SECURE_SSL_REDIRECT", "True") == "True"
    SECURE_HSTS_SECONDS = int(
        os.environ.get("SECURE_HSTS_SECONDS", 31536000)
    )  # 1 year default
    SECURE_HSTS_INCLUDE_SUBDOMAINS = (
        os.environ.get("SECURE_HSTS_INCLUDE_SUBDOMAINS", "True") == "True"
    )
    SECURE_HSTS_PRELOAD = os.environ.get("SECURE_HSTS_PRELOAD", "True") == "True"
    SESSION_COOKIE_SECURE = (
        os.environ.get("SESSION_COOKIE_SECURE", "True") == "True"
    )  # Send session cookie only over HTTPS
    CSRF_COOKIE_SECURE = (
        os.environ.get("CSRF_COOKIE_SECURE", "True") == "True"
    )  # Send CSRF cookie only over HTTPS
    SECURE_BROWSER_XSS_FILTER = True  # Add X-XSS-Protection header
    SECURE_CONTENT_TYPE_NOSNIFF = True  # Add X-Content-Type-Options: nosniff header
    # Consider X_FRAME_OPTIONS = 'DENY' unless you need parts of your site to be embeddable in iframes


# --- Jazzmin Admin Theme Settings ---
JAZZMIN_SETTINGS = {
    "site_title": "Ajeen POS Admin",
    "site_header": "Ajeen POS",
    "site_brand": "Ajeen POS",
    "welcome_sign": "Welcome to Ajeen POS Admin",
    "copyright": "Ajeen Restaurant Ltd",
    "show_ui_builder": True,  # Or False
    "changeform_format": "horizontal_tabs",
    # ADD OR MODIFY "topmenu_links"
    "topmenu_links": [
        # Default home link (optional)
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        # Your custom reset database button/link
        {
            "name": "RESET DATABASE",  # Text for the link/button
            "url": "/admin/reset-database-schema/",  # Use the direct absolute path
            "permissions": [
                "users.view_customuser"
            ],  # Show for users who can view users (typically superusers).
            # The actual security is handled by your view's decorator.
            # You can also create a specific dummy permission if needed.
            "attrs": {  # HTML attributes for the link
                "class": "btn btn-danger btn-sm jazzmin-reset-db-button",  # Bootstrap classes for styling + custom class
                "title": "EXTREME WARNING: This will WIPE your database and rerun migrations. For pre-launch testing ONLY. Click for details and final confirmation. Enabled via DEBUG or specific ENV VAR.",
                "onclick": "return confirm('EXTREME WARNING:\\n\\nThis action will attempt to WIPE ALL DATA in your database...\\n\\nAre you ABSOLUTELY SURE you want to proceed to the confirmation page?');",
                "style": "margin-left: 10px;",  # Example inline style
            },
        },
        # Example of an app link (if you have one)
        # {"model": "auth.User"},
    ],
}
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-dark",  # e.g., "navbar-light", "navbar-warning", "navbar-danger" etc.
    "accent": "accent-primary",  # e.g., "accent-secondary", "accent-success" etc.
    "navbar": "navbar-dark navbar-primary",  # Combine background and accent
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",  # Background color
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",  # Options: "default", "cerulean", "cosmo", "cyborg", "darkly", "flatly", "journal", "litera", "lumen", "lux", "materia", "minty", "pulse", "sandstone", "simplex", "sketchy", "slate", "solar", "spacelab", "superhero", "united", "yeti"
    "dark_mode_theme": "darkly",  # Theme to use in dark mode
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success",
    },
}
