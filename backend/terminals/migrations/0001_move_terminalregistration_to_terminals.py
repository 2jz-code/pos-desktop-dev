# Generated by Django 4.2.13 on 2025-10-05 19:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('settings', '0017_alter_globalsettings_tenant_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenant', '0003_fix_remaining_null_tenants'),
    ]

    operations = [
        # Create TerminalPairingCode table (this is new)
        migrations.CreateModel(
            name='TerminalPairingCode',
            fields=[
                ('device_code', models.CharField(help_text='Opaque device code (terminal uses this)', max_length=128, primary_key=True, serialize=False, unique=True)),
                ('user_code', models.CharField(db_index=True, help_text='Human-readable code (admin enters this)', max_length=9, unique=True)),
                ('device_fingerprint', models.CharField(help_text='Hardware UUID from terminal', max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('denied', 'Denied'), ('expired', 'Expired'), ('consumed', 'Token Issued')], db_index=True, default='pending', max_length=20)),
                ('expires_at', models.DateTimeField(help_text='Code expires 15 minutes after creation')),
                ('interval', models.IntegerField(default=5, help_text='Minimum seconds between polls (RFC 8628)')),
                ('nickname', models.CharField(blank=True, help_text='Terminal nickname (set by admin)', max_length=100)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('consumed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Admin who approved', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_terminal_pairings', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, help_text='Set when admin approves', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='terminal_pairing_codes', to='settings.storelocation')),
                ('tenant', models.ForeignKey(blank=True, help_text='Set when admin approves', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='terminal_pairing_codes', to='tenant.tenant')),
            ],
            options={
                'db_table': 'terminal_pairing_codes',
            },
        ),
        migrations.AddIndex(
            model_name='terminalpairingcode',
            index=models.Index(fields=['status', 'expires_at'], name='terminal_pa_status_020246_idx'),
        ),
        migrations.AddIndex(
            model_name='terminalpairingcode',
            index=models.Index(fields=['device_fingerprint'], name='terminal_pa_device__3707f1_idx'),
        ),

        # Adopt TerminalRegistration table + add new fields
        migrations.SeparateDatabaseAndState(
            state_operations=[
                # Add model to Django's migration state
                migrations.CreateModel(
                    name='TerminalRegistration',
                    fields=[
                        ('device_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                        ('nickname', models.CharField(blank=True, help_text="A friendly name for the device (e.g., 'Front Counter').", max_length=100)),
                        ('last_seen', models.DateTimeField(auto_now=True)),
                        ('is_active', models.BooleanField(default=True)),
                        ('reader_id', models.CharField(blank=True, help_text='The ID of the Stripe Terminal reader assigned to this device (e.g., tmr_...).', max_length=255)),
                        ('device_fingerprint', models.CharField(help_text='Hardware UUID', max_length=255, unique=True)),
                        ('last_authenticated_at', models.DateTimeField(blank=True, null=True)),
                        ('authentication_failures', models.IntegerField(default=0)),
                        ('is_locked', models.BooleanField(default=False)),
                        ('pairing_code', models.ForeignKey(blank=True, help_text='Original pairing code', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='terminal_registrations', to='terminals.terminalpairingcode')),
                        ('store_location', models.ForeignKey(blank=True, help_text='The primary store location this terminal is physically in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='terminal_registrations', to='settings.storelocation')),
                        ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terminal_registrations', to='tenant.tenant')),
                    ],
                    options={
                        'verbose_name': 'Terminal Registration',
                        'verbose_name_plural': 'Terminal Registrations',
                        'db_table': 'settings_terminalregistration',
                        'indexes': [models.Index(fields=['tenant', 'store_location'], name='settings_te_tenant__5f4f80_idx')],
                    },
                ),
                migrations.AddConstraint(
                    model_name='terminalregistration',
                    constraint=models.UniqueConstraint(fields=('tenant', 'device_id'), name='unique_device_id_per_tenant'),
                ),
            ],
            database_operations=[
                # Add new fields to existing table
                migrations.RunSQL(
                    sql="""
                        ALTER TABLE settings_terminalregistration
                        ADD COLUMN IF NOT EXISTS device_fingerprint varchar(255) UNIQUE,
                        ADD COLUMN IF NOT EXISTS last_authenticated_at timestamp with time zone NULL,
                        ADD COLUMN IF NOT EXISTS authentication_failures integer DEFAULT 0 NOT NULL,
                        ADD COLUMN IF NOT EXISTS is_locked boolean DEFAULT false NOT NULL,
                        ADD COLUMN IF NOT EXISTS pairing_code_id varchar(128) NULL;
                    """,
                    reverse_sql="""
                        ALTER TABLE settings_terminalregistration
                        DROP COLUMN IF EXISTS device_fingerprint,
                        DROP COLUMN IF EXISTS last_authenticated_at,
                        DROP COLUMN IF EXISTS authentication_failures,
                        DROP COLUMN IF EXISTS is_locked,
                        DROP COLUMN IF EXISTS pairing_code_id;
                    """,
                ),
                # Add foreign key constraint
                migrations.RunSQL(
                    sql="""
                        ALTER TABLE settings_terminalregistration
                        ADD CONSTRAINT settings_terminalregistration_pairing_code_fk
                        FOREIGN KEY (pairing_code_id) REFERENCES terminal_pairing_codes(device_code)
                        ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;
                    """,
                    reverse_sql="""
                        ALTER TABLE settings_terminalregistration
                        DROP CONSTRAINT IF EXISTS settings_terminalregistration_pairing_code_fk;
                    """,
                ),
            ],
        ),
    ]
