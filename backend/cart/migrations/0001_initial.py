# Generated by Django 4.2.13 on 2025-10-17 21:54

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0005_remove_customer_customers_c_email_4fdeb3_idx_and_more'),
        ('settings', '0025_remove_webordersettings_web_receipt_terminals_and_more'),
        ('tenant', '0005_assign_customers_to_default_tenant'),
        ('products', '0026_product_has_modifiers_alter_product_price'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, db_index=True, help_text='Session identifier for guest users', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now, help_text='Last time cart was modified (for abandonment tracking)')),
                ('customer', models.ForeignKey(blank=True, help_text='Authenticated customer (null for guests)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carts', to='customers.customer')),
                ('store_location', models.ForeignKey(blank=True, help_text='Store location selected at checkout. Nullable during shopping phase.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='carts', to='settings.storelocation')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='tenant.tenant')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('notes', models.TextField(blank=True, help_text="Customer notes (e.g., 'no onions')")),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cart.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='products.product')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='tenant.tenant')),
            ],
            options={
                'ordering': ['added_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItemModifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity of this modifier (e.g., "extra cheese" = 2)')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('cart_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='cart.cartitem')),
                ('modifier_option', models.ForeignKey(help_text='Live reference to modifier option (no snapshot)', on_delete=django.db.models.deletion.CASCADE, related_name='cart_item_modifiers', to='products.modifieroption')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_item_modifiers', to='tenant.tenant')),
            ],
            options={
                'indexes': [models.Index(fields=['tenant', 'cart_item'], name='cart_cartit_tenant__ccfac8_idx'), models.Index(fields=['tenant', 'modifier_option'], name='cart_cartit_tenant__70d182_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='cartitemmodifier',
            constraint=models.UniqueConstraint(fields=('tenant', 'cart_item', 'modifier_option'), name='unique_modifier_per_cart_item'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['tenant', 'cart'], name='cart_cartit_tenant__286037_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['tenant', 'product'], name='cart_cartit_tenant__ca8266_idx'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.UniqueConstraint(fields=('tenant', 'cart', 'product'), name='unique_product_per_cart'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['tenant', 'customer'], name='cart_cart_tenant__f14823_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['tenant', 'session_id'], name='cart_cart_tenant__81da63_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['tenant', 'store_location'], name='cart_cart_tenant__163dee_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['tenant', 'last_activity'], name='cart_cart_tenant__f5070e_idx'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.UniqueConstraint(condition=models.Q(('customer__isnull', False)), fields=('tenant', 'customer'), name='unique_customer_cart_per_tenant'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.UniqueConstraint(condition=models.Q(('session_id__isnull', False), models.Q(('session_id', ''), _negated=True)), fields=('tenant', 'session_id'), name='unique_guest_cart_per_tenant'),
        ),
    ]
