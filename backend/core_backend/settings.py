"""
Django settings for core_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os  # <-- Import the os module
from dotenv import load_dotenv  # <-- Add this import
import stripe
from celery.schedules import crontab

# Load environment variables from .env file
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-n8qdo8-8=_mal=&ae=+_2ei2st2e)nuzf)plw)#laj_+c7v#m&"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else ["*"]
)


# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "django_extensions",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "django_redis",
    # My Apps
    "products",
    "inventory",
    "orders",
    "payments",
    "discounts",
    "users.apps.UsersConfig",
    "settings",
    "integrations",
    "notifications",
    "reports",
    "core_backend",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "core_backend.middleware.BusinessHoursMiddleware",  # Business hours enforcement
    "core_backend.electron_middleware.ElectronPOSMiddleware",  # Electron POS handling
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database configuration
import dj_database_url

DATABASES = {
    "default": dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Chicago"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"  # URL prefix for static files

# Directory where manage.py collectstatic will copy files for deployment
STATIC_ROOT = BASE_DIR / "staticfiles"  # <--- This is the crucial setting

# --- Media files (User-uploaded content) ---
MEDIA_URL = "/media/"
# For local storage (development or simple deployments):
MEDIA_ROOT = BASE_DIR / "media"

# AWS S3 Configuration
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "us-east-1")
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

# Use S3 for media files if AWS credentials are provided
USE_S3 = bool(AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY and AWS_STORAGE_BUCKET_NAME)

if USE_S3:
    # S3 Media files configuration
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    # S3 settings
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_FILE_OVERWRITE = False
    AWS_MEDIA_LOCATION = "media"

    # Use a custom storage class for media files
    from storages.backends.s3boto3 import S3Boto3Storage

    class MediaStorage(S3Boto3Storage):
        location = AWS_MEDIA_LOCATION
        default_acl = AWS_DEFAULT_ACL
        file_overwrite = AWS_S3_FILE_OVERWRITE

    DEFAULT_FILE_STORAGE = "core_backend.settings.MediaStorage"

    print(f"Using S3 for media files: {MEDIA_URL}")
else:
    # Local storage fallback
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"
    print("Using local storage for media files")

# Base URL for building absolute URLs when no request context is available
BASE_URL = os.getenv("BASE_URL", "http://127.0.0.1:8001")

# You might also want to add STATICFILES_DIRS if you have project-specific static files
# not tied to a particular app, though it's not strictly necessary for Jazzmin to work
# STATICFILES_DIRS = [
#     BASE_DIR / "static", # Example
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "users.User"

# CORS settings
CORS_ALLOW_CREDENTIALS = True
# CORS settings - dynamically load from environment
CORS_ALLOWED_ORIGINS = (
    os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")
    if os.getenv("CORS_ALLOWED_ORIGINS")
    else [
        "http://localhost:5173",  # React/Vite dev server
        "http://127.0.0.1:5173",
        "http://localhost:8001",  # For electron app requests
        "http://127.0.0.1:8001",
        "http://localhost:5174",  # React/Vite dev server
        "http://127.0.0.1:5174",
        "http://localhost:4173",
        "http://127.0.0.1:4173",
        "http://localhost:5175",
        "http://127.0.0.1:5175",
        "http://192.168.5.144:8001",  # LAN backend server
        "https://pos.bakeajeen.com",  # Production Electron POS app
    ]
)

# Allow custom headers for Electron POS app
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-client-type",
    "x-client-version",
]

# CSRF Trusted Origins - dynamically load from environment
CSRF_TRUSTED_ORIGINS = (
    os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",")
    if os.getenv("CSRF_TRUSTED_ORIGINS")
    else [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8001",
        "http://127.0.0.1:8001",
        "http://localhost:5174",  # React/Vite dev server
        "http://127.0.0.1:5174",
        "http://localhost:4173",
        "http://127.0.0.1:4173",
        "http://localhost:5175",
        "http://127.0.0.1:5175",
        "http://192.168.5.144:8001",  # LAN backend server
        "https://pos.bakeajeen.com",  # Production Electron POS app
    ]
)

# Session Configuration for Guest Users
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
# Cookie security - check environment first, then use DEBUG-based logic
SESSION_COOKIE_SECURE = (
    os.getenv("SESSION_COOKIE_SECURE", str(not DEBUG)).lower() == "true"
)
SESSION_COOKIE_SAMESITE = os.getenv("SESSION_COOKIE_SAMESITE", "Lax") or None

# CSRF cookie security - check environment first, then use DEBUG-based logic
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", str(not DEBUG)).lower() == "true"
CSRF_COOKIE_SAMESITE = os.getenv("CSRF_COOKIE_SAMESITE", "Lax") or None

# Production security settings
if not DEBUG:
    # SSL settings
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # Cookie security
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = "Lax"

    # Additional security headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

    # Proxy settings for AWS ALB
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "users.authentication.CookieJWTAuthentication",
        "users.authentication.APIKeyAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Removed global pagination - only applied to specific ViewSets
}

# Simple JWT settings (optional, provides sensible defaults)
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        hours=1
    ),  # Increased from 5 minutes for better UX
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
    # Custom settings for cookie-based auth
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_REFRESH": "refresh_token",
    "AUTH_COOKIE_SAMESITE": "Lax",
    "AUTH_COOKIE_PERSISTENT": True,
}

# Multi-tier Redis cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 50},
        },
        'KEY_PREFIX': 'ajeen_pos',
        'VERSION': 1,  # Cache versioning for deployments
        'TIMEOUT': 300,
    },
    'static_data': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/2'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 30},
        },
        'KEY_PREFIX': 'ajeen_static',
        'VERSION': 1,
        'TIMEOUT': 3600,  # 1 hour default for static data
    },
    'session_data': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/3'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 20},
        },
        'KEY_PREFIX': 'ajeen_session',
        'VERSION': 1,
        'TIMEOUT': 900,  # 15 minutes for session data
    }
}

# Advanced session configuration
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session_data"
SESSION_COOKIE_AGE = 3600 * 8  # 8 hours

# Cache versioning for deployments
CACHE_VERSION = os.getenv('CACHE_VERSION', 1)

# ASGI configuration
ASGI_APPLICATION = "core_backend.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv("REDIS_URL", "redis://127.0.0.1:6379")],
        },
    },
}

# Jazzmin settings (can be customized further)
JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "POS Admin",
    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "POS",
    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "POS System",
    # Logo to use for your site, must be present in static files, used for brand on top left
    # "site_logo": "books/img/logo.png",
    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    # "login_logo": None,
    # Logo to use for login form in dark themes (defaults to login_logo)
    # "login_logo_dark": None,
    # CSS classes that are applied to the logo above
    # "site_logo_classes": "img-circle",
    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    # "site_icon": None,
    # Welcome text on home page
    "welcome_sign": "Welcome to the POS System Admin",
    # Copyright on footer
    "copyright": "POS Systems Inc.",
    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use search everywhere use Noneself, "users.User" will use UserSearchForm from users.admin
    "search_model": ["users.User"],
    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    # "user_avatar": None,
    ############
    # Top Menu #
    ############
    # Links to put along the top menu
    "topmenu_links": [
        # Url that gets reversed (Permissions can be added)
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        # model admin to link to (Permissions checked against model)
        # {"model": "users.User"},
        # App with dropdown menu to all its models pages (Permissions checked against models)
        # {"app": "users"},
    ],
    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    # "custom_css": None,
    # "custom_js": None,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,  # Allows easy theming from the admin panel
    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - tabs
    # - collapsible
    # - carousel
    "changeform_format": "collapsible",
    # override change forms on a per modeladmin basis
    # "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-primary",  # Example: "navbar-indigo", "navbar-navy"
    "accent": "accent-primary",
    "navbar": "navbar-dark navbar-primary",  # Example: "navbar-white navbar-light"
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",  # Example: "sidebar-dark-indigo", "sidebar-light-indigo"
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_ stijl": False,
    "sidebar_nav_legacy_ stijl": False,
    "sidebar_nav_flat_ stijl": False,
    "theme": "default",  # Predefined themes: "default", "cerulean", "cosmo", "cyborg", "darkly", "flatly", "journal", "litera", "lumen", "lux", "materia", "minty", "pulse", "sandstone", "simplex", "sketchy", "slate", "solar", "spacelab", "superhero", "united", "yeti"
    "dark_mode_theme": "darkly",  # Theme to use when dark mode is preferred
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success",
    },
}

# ==============================================================================
# STRIPE SETTINGS
# ==============================================================================
# It's highly recommended to use environment variables for these keys in production.
# import os
# STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")
# STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
# STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET")

# For development, you can set them directly.
# Replace these with your actual test keys.
# --- Payment Configs ---
STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET")

stripe.api_key = STRIPE_SECRET_KEY

# ==============================================================================
# GOOGLE SETTINGS
# ==============================================================================
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
GOOGLE_PLACE_ID = os.environ.get("GOOGLE_PLACE_ID")


EMAIL_BACKEND = os.environ.get(
    "DJANGO_EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)  # Default to console backend if not set
EMAIL_HOST = os.environ.get("DJANGO_EMAIL_HOST")
EMAIL_PORT = int(
    os.environ.get("DJANGO_EMAIL_PORT", 587)
)  # Default to 587, ensure it's an int
EMAIL_USE_TLS = (
    os.environ.get("DJANGO_EMAIL_USE_TLS", "True") == "True"
)  # Convert to boolean
EMAIL_USE_SSL = (
    os.environ.get("DJANGO_EMAIL_USE_SSL", "False") == "True"
)  # Convert to boolean
EMAIL_HOST_USER = os.environ.get("DJANGO_EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("DJANGO_EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DJANGO_DEFAULT_FROM_EMAIL")
BUSINESS_CONTACT_EMAIL = os.environ.get("DJANGO_BUSINESS_CONTACT_EMAIL")

# ==============================================================================
# CELERY SETTINGS
# ==============================================================================
# Celery Configuration Options
CELERY_BROKER_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379")
CELERY_RESULT_BACKEND = os.getenv("REDIS_URL", "redis://127.0.0.1:6379")

# Task serialization
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]

# Timezone configuration
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Task execution settings
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Result settings
CELERY_RESULT_EXPIRES = 3600  # 1 hour

# Task routing (optional - for organizing tasks)
CELERY_TASK_ROUTES = {
    "reports.tasks.generate_report_async": {"queue": "reports"},
    "reports.tasks.export_report_async": {"queue": "exports"},
    "reports.tasks.generate_scheduled_reports": {"queue": "scheduled"},
    "reports.tasks.cleanup_old_reports": {"queue": "maintenance"},
    "reports.tasks.warm_report_caches": {"queue": "maintenance"},
    # Phase 3 - Advanced Export Tasks
    "reports.tasks.process_bulk_export_async": {"queue": "bulk_exports"},
    "reports.tasks.create_bulk_export_async": {"queue": "exports"},
    "reports.tasks.process_export_queue": {"queue": "exports"},
    "reports.tasks.cleanup_export_files": {"queue": "maintenance"},
    # Inventory tasks
    "inventory.tasks.daily_low_stock_sweep": {"queue": "maintenance"},
    "inventory.tasks.reset_low_stock_notifications": {"queue": "maintenance"},
}

# Beat schedule for periodic tasks
CELERY_BEAT_SCHEDULE = {
    "cleanup-old-reports": {
        "task": "reports.tasks.cleanup_old_reports",
        "schedule": 86400.0,  # Every 24 hours
    },
    "generate-scheduled-reports": {
        "task": "reports.tasks.generate_scheduled_reports",
        "schedule": 3600.0,  # Every hour
    },
    "warm-report-caches": {
        "task": "reports.tasks.warm_report_caches",
        "schedule": 10800.0,  # Every 3 hours
    },
    # Phase 3 - Advanced Export Tasks
    "cleanup-export-files": {
        "task": "reports.tasks.cleanup_export_files",
        "schedule": 86400.0,  # Every 24 hours
    },
    "process-export-queue": {
        "task": "reports.tasks.process_export_queue",
        "schedule": 300.0,  # Every 5 minutes
    },
    # Inventory management tasks
    "daily-low-stock-sweep": {
        "task": "inventory.tasks.daily_low_stock_sweep",
        "schedule": crontab(
            hour=7, minute=30
        ),  # Every day at 8:00 AM (server timezone)
        "options": {"expires": 3600},  # Task expires after 1 hour if not run
    },
    "reset-low-stock-notifications": {
        "task": "inventory.tasks.reset_low_stock_notifications",
        "schedule": crontab(hour=5, minute=0, day_of_week=0),  # Every Sunday at 2:00 AM
        "options": {"expires": 7200},  # Task expires after 2 hours if not run
    },
    # Cache warming tasks
    "warm-critical-caches": {
        "task": "core_backend.tasks.warm_critical_caches",
        "schedule": crontab(hour=7, minute=0),  # 7 AM daily
        "options": {"expires": 3600},
    },
    # Cache health monitoring
    "cache-health-check": {
        "task": "core_backend.tasks.cache_health_check",
        "schedule": 300.0,  # Every 5 minutes
        "options": {"expires": 240},
    },
    # Clear expired cache locks
    "clear-expired-locks": {
        "task": "core_backend.tasks.clear_expired_cache_locks",
        "schedule": 3600.0,  # Every hour
        "options": {"expires": 1800},
    },
}
