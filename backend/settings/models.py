from django.db import models
from django.core.exceptions import ValidationError
from decimal import Decimal


class TerminalProvider(models.TextChoices):
    STRIPE_TERMINAL = "STRIPE_TERMINAL", "Stripe Terminal"
    CLOVER_TERMINAL = "CLOVER_TERMINAL", "Clover Terminal"


class GlobalSettings(models.Model):
    """
    A singleton model to store globally accessible settings for the application.
    """

    tax_rate = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=Decimal("0.08"),
        help_text="The default sales tax rate as a decimal (e.g., 0.08 for 8%).",
    )
    surcharge_percentage = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=Decimal("0.00"),
        help_text="A percentage-based surcharge applied to the subtotal (e.g., 0.02 for 2%).",
    )
    active_terminal_provider = models.CharField(
        max_length=50,
        choices=TerminalProvider.choices,
        default=TerminalProvider.STRIPE_TERMINAL,
        help_text="The currently active payment terminal provider.",
    )

    def clean(self):
        """
        Ensures that a new instance cannot be created if one already exists.
        """
        if GlobalSettings.objects.exists() and not self.pk:
            raise ValidationError("There can only be one GlobalSettings instance.")

    def save(self, *args, **kwargs):
        """
        Overrides the save method to run the clean method first.
        """
        self.clean()
        super().save(*args, **kwargs)

    def __str__(self):
        return "Global Application Settings"

    class Meta:
        verbose_name_plural = "Global Settings"


class POSDevice(models.Model):
    """
    Represents a physical Point of Sale station and its permanent configuration.
    This model links a unique device ID (generated and stored by the client)
    to a specific Stripe Terminal reader ID.
    """

    device_id = models.CharField(
        max_length=255,
        unique=True,
        primary_key=True,
        help_text="Unique identifier for the POS device, generated by the client application.",
    )
    reader_id = models.CharField(
        max_length=255,
        help_text="The ID of the Stripe Terminal reader assigned to this device (e.g., tmr_...).",
    )
    nickname = models.CharField(
        max_length=100,
        blank=True,
        help_text="An optional friendly name for the POS station (e.g., 'Front Counter').",
    )

    def __str__(self):
        return f"{self.nickname or self.device_id} -> {self.reader_id}"

    class Meta:
        verbose_name = "POS Device Pairing"
        verbose_name_plural = "POS Device Pairings"


class TerminalLocation(models.Model):
    """
    Represents a physical store location that has been synced from Stripe.
    This allows for scoping terminal actions (like discovering readers) to a specific
    location. There can be only one default location at a time.
    """

    name = models.CharField(
        max_length=255, help_text="The user-friendly name of the location."
    )
    stripe_id = models.CharField(
        max_length=255,
        unique=True,
        help_text="The ID of the location from Stripe (e.g., tml_...).",
    )
    is_default = models.BooleanField(
        default=False,
        help_text="Whether this is the default location for transactions.",
    )

    def __str__(self):
        return f"{self.name} ({'Default' if self.is_default else 'Not Default'})"

    def save(self, *args, **kwargs):
        """
        Overrides the save method to ensure that if this location is being set as
        the default, any other location that is currently the default is unset.
        """
        if self.is_default:
            # Unset any other default location.
            TerminalLocation.objects.filter(is_default=True).exclude(pk=self.pk).update(
                is_default=False
            )
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "Terminal Location"
        verbose_name_plural = "Terminal Locations"
        ordering = ["name"]
